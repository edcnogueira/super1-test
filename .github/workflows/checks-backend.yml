name: 'Pull Request: Checks'

on:
  pull_request:
    paths:
      - 'backend/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: backend

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.22

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Save Bun cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.22

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome (lint)
        run: bunx --bun biome check --reporter=github .

      - name: Save Bun cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

  build:
    name: Build
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.22

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Bundle project (type-check via Bun bundler)
        run: bun build ./index.ts --outdir dist --target=bun

      - name: Save Bun cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://dbuser:dbpass@localhost:5432/dbsuper
      APP_ENV: test
      NODE_ENV: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.22

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Start PostgreSQL with docker-compose
        run: |
          docker compose version
          docker compose up -d postgres

      - name: Wait for PostgreSQL to be ready
        run: |
          # Wait until database accepts connections
          timeout 60s bash -c 'until docker compose exec -T postgres bash -lc "pg_isready -U dbuser -d dbsuper"; do sleep 2; done'

      - name: Prepare .env for migrations
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "APP_ENV=${APP_ENV}" >> .env
          echo "NODE_ENV=${NODE_ENV}" >> .env

      - name: Run migrations
        run: bun db:migrate

      - name: Run tests
        run: bun test --timeout=60000

      - name: Save Bun cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

      - name: Stop services
        if: always()
        run: docker compose down -v